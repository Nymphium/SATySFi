@require: math

module LocalMath = struct

  val synt-color = RGB(0.0, 0.0, 0.75)
  val meta-color = RGB(0.75, 0.0, 0.75)

  val math \synt-color m = ${\Math.math-color!(synt-color){#m}}

  val math \token s = ${\synt-color{\Math.text!{#s;}}}

  val math \patp = math-color meta-color ${p}
  val math \varx = math-color meta-color ${x}
  val math \cstc = math-color meta-color ${c}
  val math \constrC = math-color meta-color ${C}
  val math \patsP = math-color meta-color ${P}
  val math \valv = math-color meta-color ${v}
  val math \expre = math-color meta-color ${e}
  val math \bt = math-color meta-color ${bt}
  val math \it = math-color meta-color ${it}

  val math \valunit = math-color synt-color ${\Math.text!{()}}
  val math \valtrue = math-color synt-color ${\token!{true}}
  val math \valfalse = math-color synt-color ${\token!{false}}

  val math \valit m =
    ${\Math.text!{\{}#m\Math.text!{\}}}

  val math \valbt m =
    ${\Math.angle-bracket{#m}}

  val math \wildcard = ${\synt-color{\_}}

  val math \patas p x =
    ${#p \token!{\ as\ } #x}

  val math \constrapp m1 m2 = ${#m1 \Math.math-skip!(4pt) #m2}

  val math \tuple mlst =
    let inner = Math.join ${,} mlst in
      math-color synt-color ${\Math.paren{\Math.math-skip!(2pt)#inner\Math.math-skip!(1pt)}}

  val math \exprfunc p =
    ${\token!{function\ } #p}

  val math \exprabsI x e =
    ${\token!{${\Math.lambda^{\token!{I}}}}#x.\token!{\ }#e}

  %val math \exprabsI x e =
  %  ${\synt-color{\lambda^{\mathrm{I}}}#x\token!{.\ }#e}

  val math \exprabsB x e =
    ${\synt-color{\Math.lambda^{\Math.mathrm{B}}}#x\token!{.\ }#e}

  val math \valB m =
    ${\synt-color{\Math.angle-bracket{#m}}}

  val math \BNF nontm mlst =
    let defs = Math.join ${\|} mlst in
      ${#nontm \Math.mathrel{: : =} #defs}

end
